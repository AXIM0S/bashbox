#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([output-directory])
# ARG_OPTIONAL_SINGLE([compress-level])
# ARG_OPTIONAL_SINGLE([compress-method])
# ARG_OPTIONAL_BOOLEAN([wizard])
# ARG_POSITIONAL_SINGLE([path])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_path=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output_directory=
_arg_compress_level=
_arg_compress_method=
_arg_wizard="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--output-directory <arg>] [--compress-level <arg>] [--compress-method <arg>] [--(no-)wizard] [-h|--help] <path>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--output-directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output_directory="$2"
				shift
				;;
			--output-directory=*)
				_arg_output_directory="${_key##--output-directory=}"
				;;
			--compress-level)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_compress_level="$2"
				shift
				;;
			--compress-level=*)
				_arg_compress_level="${_key##--compress-level=}"
				;;
			--compress-method)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_compress_method="$2"
				shift
				;;
			--compress-method=*)
				_arg_compress_method="${_key##--compress-method=}"
				;;
			--no-wizard|--wizard)
				_arg_wizard="on"
				test "${1:0:5}" = "--no-" && _arg_wizard="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# For example:
printf 'Value of --%s: %s\n' 'output-directory' "$_arg_output_directory"
printf 'Value of --%s: %s\n' 'compress-level' "$_arg_compress_level"
printf 'Value of --%s: %s\n' 'compress-method' "$_arg_compress_method"
printf "'%s' is %s\\n" 'wizard' "$_arg_wizard"
printf "Value of '%s': %s\\n" 'path' "$_arg_path"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
