#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([short-desc])
# ARG_OPTIONAL_SINGLE([usage])
# ARG_OPTIONAL_SINGLE([options-desc])
# ARG_OPTIONAL_SINGLE([subcommands])
# ARG_OPTIONAL_SINGLE([examples])
# ARG_OPTIONAL_SINGLE([footer-msg])
# ARG_POSITIONAL_SINGLE([helpname])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


println::error()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_helpname=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_short_desc=
_arg_usage=
_arg_options_desc=
_arg_subcommands=
_arg_examples=
_arg_footer_msg=


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--short-desc <arg>] [--usage <arg>] [--options-desc <arg>] [--subcommands <arg>] [--examples <arg>] [--footer-msg <arg>] [-h|--help] <helpname>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--short-desc)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_short_desc="$2"
				shift
				;;
			--short-desc=*)
				_arg_short_desc="${_key##--short-desc=}"
				;;
			--usage)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_usage="$2"
				shift
				;;
			--usage=*)
				_arg_usage="${_key##--usage=}"
				;;
			--options-desc)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_options_desc="$2"
				shift
				;;
			--options-desc=*)
				_arg_options_desc="${_key##--options-desc=}"
				;;
			--subcommands)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_subcommands="$2"
				shift
				;;
			--subcommands=*)
				_arg_subcommands="${_key##--subcommands=}"
				;;
			--examples)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_examples="$2"
				shift
				;;
			--examples=*)
				_arg_examples="${_key##--examples=}"
				;;
			--footer-msg)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_footer_msg="$2"
				shift
				;;
			--footer-msg=*)
				_arg_footer_msg="${_key##--footer-msg=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'helpname'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes println::error "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes println::error "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_helpname "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || println::error "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash
